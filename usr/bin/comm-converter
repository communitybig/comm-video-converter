#!/usr/bin/env bash

# Version: 3.0.0

# Define color variables
noColor="\e[0m"
green="\e[32m"
yellow="\e[33m"
cyan="\e[36m"
blue="\e[34m"

# Show help if no arguments are passed or the first argument is -h or --help
if [[ $# -eq 0 || $1 == "-h" || $1 == "--help" ]]; then
    echo -e "${cyan}Usage:${noColor} ${yellow}variables=value${noColor} $0 ${yellow}input_file${noColor}"
    echo ""
    echo -e "${cyan}You can specify various variables before the command. Below are the available options and examples:${noColor}"
    echo ""
    echo -e "${blue}1. Specifying the GPU:${noColor}"
    echo -e "   ${cyan}You can specify which GPU to use for the operation. Options include:${green} nvidia, amd, intel, software${noColor}"
    echo -e "   ${cyan}Example:${noColor} ${yellow}gpu=nvidia${noColor} $0 ${yellow}video.mkv${noColor}"
    echo ""
    echo -e "${blue}2. Specifying the Output File:${noColor}"
    echo -e "   ${cyan}You can specify the name of the output file. If this variable is not specified, a default name will be used.${noColor}"
    echo -e "   ${cyan}Example:${noColor} ${yellow}output_file=video_converted.mp4${noColor} $0 ${yellow}video.mkv${noColor}"
    echo ""
    echo -e "${blue}3. Specifying the Output Folder:${noColor}"
    echo -e "   ${cyan}You can specify the folder where the output file will be saved. This will save the file with the same name as the input file in the specified folder.${noColor}"
    echo -e "   ${cyan}If ${yellow}output_file${cyan} is specified, this variable is ignored.${noColor}"
    echo -e "   ${cyan}Example:${noColor} ${yellow}output_folder=/home/user/Videos${noColor} $0 ${yellow}video.mkv${noColor}"
    echo ""
    echo -e "${blue}4. Specifying Video Quality:${noColor}"
    echo -e "   ${cyan}You can specify the quality of the video. Options include:${green} veryhigh, high, medium, low, verylow${noColor}"
    echo -e "   ${cyan}Example:${noColor} ${yellow}video_quality=high${noColor} $0 ${yellow}video.mkv${noColor}"
    echo ""
    echo -e "${blue}5. Specifying Audio Bitrate:${noColor}"
    echo -e "   ${cyan}You can specify the bitrate of the audio. Example:${green} 128k, 192k, 256k${noColor}"
    echo -e "   ${cyan}Default is 32k per channel, stereo audio will have 64k bitrate, and 5.1 audio will have 192k bitrate${noColor}"
    echo -e "   ${cyan}Example:${noColor} ${yellow}audio_bitrate=192k${noColor} $0 ${yellow}video.mkv${noColor}"
    echo ""
    echo -e "${blue}6. Specifying Audio Channels:${noColor}"
    echo -e "   ${cyan}You can specify the number of audio channels. If not specified, the default will be used.${noColor}"
    echo -e "   ${cyan}Example:${noColor} ${yellow}audio_channels=2${noColor} $0 ${yellow}video.mkv${noColor}"
    echo ""
    echo -e "${blue}7. Resizing Video Resolution:${noColor}"
    echo -e "   ${cyan}You can specify the resolution for resizing the video. Example:${green} 1280x720, 1920x1080${noColor}"
    echo -e "   ${cyan}Example:${noColor} ${yellow}video_resolution=1280x720${noColor} $0 ${yellow}video.mkv${noColor}"
    echo ""
    echo -e "${blue}8. Specifying Compression Preset:${noColor}"
    echo -e "   ${cyan}You can specify the preset for compression.:${green} ultrafast, veryfast, faster, medium, slow, veryslow${noColor}"
    echo -e "   ${cyan}Default is medium for GPU encode and faster for software encode${noColor}"
    echo -e "   ${cyan}Example:${noColor} ${yellow}preset=veryslow${noColor} $0 ${yellow}video.mkv${noColor}"
    echo ""
    echo -e "${blue}9. Passing Additional Options to FFmpeg:${noColor}"
    echo -e "   ${cyan}You can pass additional options directly to FFmpeg using the ${yellow}options${cyan} variable.${noColor}"
    echo -e "   ${cyan}Example to cut a video from 1 minute to 30 seconds:${noColor}"
    echo -e "   ${yellow}options=\"-ss 60 -t 30\"${noColor} $0 ${yellow}video.mkv${noColor}"
    echo ""
    echo -e "${blue}10. Specifying Subtitle Handling:${noColor}"
    echo -e "   ${cyan}You can specify how to handle subtitles. Options include:${green} extract, embedded, none${noColor} Default is extract"
    echo -e "   ${cyan}Example to extract subtitles:${noColor} ${yellow}subtitle_extract=extract${noColor} $0 ${yellow}video.mkv${noColor}"
    echo ""
    echo -e "${blue}11. Specifying Audio Handling:${noColor}"
    echo -e "   ${cyan}You can specify how to handle audio. Options include:${green} copy, reencode, none${noColor} Default is copy"
    echo -e "   ${cyan}Example to copy audio without reencoding:${noColor} ${yellow}audio_handling=copy${noColor} $0 ${yellow}video.mkv${noColor}"
    echo ""
    echo -e "${blue}12. Specifying Video Encoder:${noColor}"
    echo -e "   ${cyan}You can specify the video encoder. Options include:${green} h264, h265, av1, vp9${noColor} Default is h264"
    echo -e "   ${cyan}Example to use h265 encoder:${noColor} ${yellow}video_encoder=h265${noColor} $0 ${yellow}video.mkv${noColor}"
    echo ""
    echo -e "${blue}13. Force Gpu partial mode, decode using CPU and encode using GPU:${noColor}"
    echo -e "   ${yellow}gpu_partial=1${noColor}"
    echo ""
    echo -e "${blue}14. Force CPU decode and encode:${noColor}"
    echo -e "   ${yellow}force_software=1${noColor}"
    echo ""
    echo -e "${blue}15. Copy video without reencode:${noColor}"
    echo -e "   ${yellow}force_copy_video=1${noColor}"
    echo ""
    echo -e "${blue}15. Only extract subtitles to .srt files:${noColor}"
    echo -e "   ${yellow}only_extract_subtitles=1${noColor}"
    exit 0
fi

# Use the first argument as the input file
input_file="$1"

# Remove extension from the input file
input_file_without_extension=${input_file%.*}

# Check if the output_folder variable exists and variable output_file not exists
if [[ -n $output_folder && -z $output_file ]]; then
    output_file="$output_folder/$input_file_without_extension"
fi

# If variable output_file is not set, use the input file name
: ${output_file:="$input_file_without_extension"}

# Info about the input file
ffprobe_result=$(ffprobe -select_streams s -show_entries stream=index:stream_tags=language,title:stream_disposition=forced -of csv=p=0 "$input_file" 2>&1)

# Filter only subtitles in srt format
subtitle_list_srt=$(grep 'Subtitle: subrip (srt)' <<<"$ffprobe_result")

subtitle_list_srt_ids=$(sed -E 's|.*Stream #0:([0-9]+).*|\1|g' <<<"$subtitle_list_srt")

# Filter simplified 
subtitle_list_simplified=$(grep '^[0-9],' <<<"$ffprobe_result")

audio_list=$(grep ': Audio: ' <<<"$ffprobe_result")

# Convert to an array
mapfile -t subtitles <<<"$subtitle_list_simplified"

# If not specified, use extract
: ${subtitle_extract:=extract}

# Subtitle handling
if [[ $subtitle_extract == "embedded" ]]; then
    subtitle_cmd="-map 0:s? -c:s mov_text"
elif [[ $subtitle_extract == "extract" ]]; then
    if [[ -n $subtitle_list_srt ]]; then
        # Declare an associative array to track language code usage
        declare -A language_code_usage

        # Loop through the array
        for i in "${subtitles[@]}"; do

            IFS=',' read -r index disposition language_code title <<< "$i"

            # Only process the subtitle if it is in the list of srt subtitles
            if [[ $subtitle_list_srt_ids =~ $index ]]; then
            
                # Remove white spaces from the language code
                language_code=${language_code// /}
                
                # Verify if the language code is valid
                if [[ -z $language_code || $language_code == "0" ]]; then
                    language_code="und"  # undetermined, if the language code is empty
                fi
                
                # Check if the language code has been used before
                if [[ -n "${language_code_usage[$language_code]}" ]]; then
                    language_code_count=${language_code_usage[$language_code]}
                    ((language_code_count++))
                    language_code_usage[$language_code]=$language_code_count
                    language_code="${language_code}${language_code_count}"
                else
                    language_code_usage[$language_code]=1
                fi
                
                if [[ $title == *"(Forced)"* || $disposition == "1" ]]; then
                    suffix=".forced"
                else
                    suffix=""
                fi
                
                output_file_srt="$output_file.$language_code$suffix.srt"

                subtitle_cmd+=" -map 0:$index -c copy \"$output_file_srt\" "

            fi
        done
    fi
elif [[ $subtitle_extract == "none" ]]; then
    subtitle_cmd=""
fi

# If not specified, use copy
: ${audio_handling:=copy}

# Audio handling
if [[ $audio_handling == "copy" ]]; then
    audio_info=$(ffprobe -v error -select_streams a -show_entries stream=index:stream_tags=language -of csv=p=0 "$input_file")
    mapfile -t audio_streams <<< "$audio_info"
    for i in "${!audio_streams[@]}"; do
        IFS=',' read -r index_audio language_audio <<< "${audio_streams[$i]}"
        audio_cmd+="-map 0:$index_audio -c:a:$i copy "
    done
elif [[ $audio_handling == "reencode" ]]; then
    audio_info=$(ffprobe -v error -select_streams a -show_entries stream=index:stream_tags=language -of csv=p=0 "$input_file")
    mapfile -t audio_streams <<< "$audio_info"
    unset i
    for i in "${!audio_streams[@]}"; do
        IFS=',' read -r index_audio language_audio <<< "${audio_streams[$i]}"
        
        # Get the number of channels for this specific audio track
        if [[ -n $audio_channels ]]; then
            channels=$audio_channels
        else
            channels=$(ffprobe -v error -select_streams a:$i -show_entries stream=channels -of csv=p=0 "$input_file")
        fi
        
        # Remove white spaces from the language_audio
        language_audio=${language_audio// /}

        # Verify if the language_audio is empty, if not set it to undetermined
        if [[ -z $language_audio ]]; then
            language_audio="und"
        fi

        if [[ -z $audio_bitrate ]]; then
            audio_bitrate_value=$((channels * 32))k
        else
            audio_bitrate_value=$audio_bitrate
        fi

        audio_cmd+="-map 0:$index_audio -c:a:$i aac -aac_coder fast -profile:a aac_low -b:a:$i $audio_bitrate_value -ac:a:$i $channels "

    done
elif [[ $audio_handling == "none" ]]; then
    audio_cmd="-an"
fi

# Set default values for video quality parameters
: ${cq_value:=28}
: ${qp_value:=24}
: ${global_quality:=24}
: ${cq_value_nvidia:=28}


# Override default values if video_quality is specified
case $video_quality in
    veryhigh)
        cq_value=19
        qp_value=18
        global_quality=18
        cq_value_nvidia=19
        ;;
    high)
        cq_value=24
        qp_value=21
        global_quality=21
        cq_value_nvidia=24
        ;;
    medium)
        cq_value=28
        qp_value=24
        global_quality=24
        cq_value_nvidia=28
        ;;
    low)
        cq_value=31
        qp_value=27
        global_quality=27
        cq_value_nvidia=31
        ;;
    verylow)
        cq_value=34
        qp_value=30
        global_quality=30
        cq_value_nvidia=34
        ;;
esac

# Convert preset for NVIDIA, if not specified, use veryslow only for NVIDIA
case $preset in
    ultrafast)
        nvidia_preset=1
        ;;
    veryfast)
        nvidia_preset=2
        ;;
    faster)
        nvidia_preset=3
        ;;
    medium)
        nvidia_preset=4
        ;;
    slow)
        nvidia_preset=5
        ;;
    veryslow)
        nvidia_preset=6
        ;;
    *)
        nvidia_preset=4
        ;;
esac

# If preset is not specified, use veryslow for AMD and Intel and veryfast for software encoding
if [[ -z $preset ]]; then
    language_audio="und"
    preset=medium
    software_preset=faster
else
    software_preset=$preset
fi



# Add video resolution if specified
if [[ -n $video_resolution ]]; then
    video_filter="-vf scale=$video_resolution"
else
    video_filter=''
fi

# Set default video encoder if not specified
: ${video_encoder:=h264}


general_params="-i \"$input_file\" $subtitle_cmd -map 0:v:0 $audio_cmd $video_filter"
enable_cuda='-hwaccel cuda -hwaccel_output_format cuda'
enable_complete_vaapi='-init_hw_device vaapi -hwaccel vaapi -hwaccel_output_format vaapi'
enable_complete_qsv='-init_hw_device vaapi=va:,driver=iHD,kernel_driver=i915 -init_hw_device qsv=qs@va -filter_hw_device qs -hwaccel qsv -hwaccel_output_format qsv'
enable_partial_qsv='-init_hw_device vaapi=va:,driver=iHD,kernel_driver=i915 -init_hw_device qsv=qs@va -filter_hw_device qs -hwaccel_output_format qsv'


# Select appropriate encoder command based on the specified video encoder
case $video_encoder in
    h265)
        nvidia_nvenc="$general_params -c:v hevc_nvenc -rc:v constqp -qp $qp_value -b:v 0K -tune:v hq -preset:v p$nvidia_preset"
        nvidia_cuda="$enable_cuda $nvidia_nvenc"
        amd_complete_vaapi="$enable_complete_vaapi $general_params -c:v hevc_vaapi -preset $preset -global_quality $global_quality"
        amd_partial_vaapi="$general_params -c:v hevc_vaapi -preset $preset -global_quality $global_quality"
        intel_complete_qsv="$enable_complete_qsv $general_params -c:v hevc_qsv -preset $preset -global_quality $global_quality"
        intel_partial_qsv="$enable_partial_qsv $general_params -c:v hevc_qsv -preset $preset -global_quality $global_quality"
        software_encode="$general_params -c:v libx265 -preset $software_preset -crf $qp_value"
        copy_video="$general_params -c:v copy"
        ;;
    av1)
        nvidia_nvenc="$general_params -c:v av1_nvenc -cq $cq_value -preset:v p$nvidia_preset"
        nvidia_cuda="$enable_cuda $nvidia_nvenc"
        amd_complete_vaapi="$enable_complete_vaapi $general_params -c:v av1_vaapi -preset $preset -global_quality $global_quality"
        amd_partial_vaapi="$general_params -c:v av1_vaapi -preset $preset -global_quality $global_quality"
        intel_complete_qsv="$enable_complete_qsv $general_params -c:v av1_qsv -preset $preset -global_quality $global_quality"
        intel_partial_qsv="$enable_partial_qsv $general_params -c:v av1_qsv -preset $preset -global_quality $global_quality"
        software_encode="$general_params -c:v libaom-av1 -preset $software_preset -crf $cq_value"
        copy_video="$general_params -c:v copy"
        ;;
    vp9)
        software_encode="$general_params -c:v libvpx-vp9 -preset $software_preset -crf $qp_value -b:v 0 -speed 1"
        copy_video="$general_params -c:v copy"
        ;;
    # Default is h264
    *)
        nvidia_nvenc="$general_params -c:v h264_nvenc -vf scale_cuda=format=yuv420p -rc:v vbr -cq $cq_value_nvidia -tune:v hq -preset:v p$nvidia_preset -bufsize:v 10000K -temporal-aq 1 -rc-lookahead 100"
        # nvidia_nvenc="$general_params -c:v h264_nvenc -rc:v constqp -qp $qp_value -tune:v hq -preset:v p$nvidia_preset -bufsize:v 10000K -temporal-aq 1 -rc-lookahead 20"
        nvidia_cuda="$enable_cuda $nvidia_nvenc"

        amd_complete_vaapi="$enable_complete_vaapi $general_params -c:v h264_vaapi -preset $preset -profile:v high -level:v 4.1 -rc_mode 1 -fps_mode cfr -g 60 -keyint_min 60 -look_ahead_depth 100 -low_delay_brc 1 -extbrc 1 -global_quality $global_quality"

        amd_partial_vaapi="-init_hw_device vaapi $general_params -vf 'format=nv12,hwupload' -c:v h264_vaapi -compression_level 19 -preset $preset -profile:v high -level:v 4.1 -rc_mode 1 -fps_mode cfr -g 60 -keyint_min 60 -look_ahead_depth 100 -low_delay_brc 1 -extbrc 1 -global_quality $global_quality"

        intel_complete_qsv="$enable_complete_qsv $general_params -c:v h264_qsv -preset $preset -profile:v high -level:v 4.1 -fps_mode cfr -g 48 -keyint_min 48 -look_ahead_depth 100 -low_delay_brc 1 -extbrc 1 -global_quality $global_quality -mbbrc 1 -adaptive_i 1 -adaptive_b 1"

        intel_partial_qsv="$enable_partial_qsv $general_params -c:v h264_qsv -preset $preset -profile:v high -level:v 4.1 -fps_mode cfr -g 48 -keyint_min 48 -look_ahead_depth 100 -low_delay_brc 1 -extbrc 1 -global_quality $global_quality -mbbrc 1 -adaptive_i 1 -adaptive_b 1"

        software_encode="$general_params -c:v libx264 -preset $software_preset -profile:v high -level:v 4.1 -crf $qp_value -look_ahead_depth 100"

        copy_video="$general_params -c:v copy"
        ;;
esac

# If not specified the GPU, detect it
if [[ -z $gpu ]]; then
    devices=$(lspci)
    if grep -qiE '(VGA|3d).*nvidia' <<<"$devices"; then
        gpu=$nvidia_cuda
        gpu_second_option=$nvidia_nvenc
    elif grep -qiE 'VGA.*(\bAMD\b|\bATI\b)' <<<"$devices"; then
        gpu=$amd_complete_vaapi
        gpu_second_option=$amd_partial_vaapi
    elif grep -qi 'VGA.*intel' <<<"$devices"; then
        gpu=$intel_complete_qsv
        gpu_second_option=$intel_partial_qsv

    else
        gpu=$software_encode
    fi
fi

if [[ $gpu_partial = 1 ]]; then
    gpu=$gpu_second_option
fi

if [[ $force_software = 1 ]]; then
    gpu=$software_encode
fi

if [[ $force_copy_video = 1 ]]; then
    gpu=$copy_video
fi



# Change to case insensitive
shopt -s nocasematch

# Check if the output file has the extension, if not, add mp4
if [[ ! "$output_file" =~ \.(mp4|avi|mkv|mov|wmv|flv|webm|mpeg|mpg)$ ]]; then
    output_file="$output_file.mp4"
fi

# Back to case sensitive
shopt -u nocasematch

# Generic options for ffmpeg
ffmpeg_generic_options="-movflags +faststart -y \"$output_file\""

# If jellyfin-ffmpeg is installed, use it
if [[ -e /usr/lib/jellyfin-ffmpeg/ffmpeg ]]; then
    ffmpeg_executable="/usr/lib/jellyfin-ffmpeg/ffmpeg"
else
    ffmpeg_executable="ffmpeg"
fi

if [[ $only_extract_subtitles = 1 ]]; then
echo legenda
    general_params="-i \"$input_file\" $subtitle_cmd"
    eval $ffmpeg_executable $general_params
exit
fi


# Try to encode with the GPU
eval $ffmpeg_executable $options $gpu $ffmpeg_generic_options

# Store the exit code while preserving $? for later checks
exit_code=$?

# If encoding not successful, and not exit with 255 (interrupted by user), and not software encoding, try with the second option
if [[ $exit_code != 0 && $exit_code != 255 && $force_software != 1 && $force_copy_video != 1 ]]; then
    eval $ffmpeg_executable $options $gpu_second_option $ffmpeg_generic_options
    exit_code=$?
fi

# If encoding not successful, and not exit with 255 (interrupted by user), and not software encoding, try with software encoding
if [[ $exit_code != 0 && $exit_code != 255 && $force_software != 1 && $force_copy_video != 1 ]]; then
    eval $ffmpeg_executable $options $software_encode $ffmpeg_generic_options
    exit_code=$?
fi

if [[ $exit_code != 0 ]]; then
    echo -e "${yellow}Conversion failed with exit code $exit_code.${noColor}"
    exit $exit_code
fi